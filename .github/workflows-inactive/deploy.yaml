name: "Deploy to production"

on:
  push:
    branches:
      - "master"

env:
  php-extensions: "json"

jobs:
  deploy:
    name: "Deploy"
    runs-on: "${{ matrix.operating-system }}"

    strategy:
      matrix:
        php-versions: [ "7.4" ]
        node-versions: [ "14" ]
        operating-system: [ "ubuntu-latest" ]
      fail-fast: false

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2"

      - name: "Setup SSH private repositories access"
        uses: "webfactory/ssh-agent@v0.4.1"
        with:
          ssh-private-key: "${{ secrets.SSH_PRIVATE_KEY }}"

      - name: "Setup PHP cache environment"
        id: "php-extension-cache"
        uses: "shivammathur/cache-extensions@v1"
        with:
          php-version: "${{ matrix.php-versions }}"
          extensions: "${{ env.php-extensions }}"
          key: "${{ env.php-extensions }}"

      - name: "Cache PHP extensions"
        uses: "actions/cache@v2"
        with:
          path: "${{ steps.php-extension-cache.outputs.dir }}"
          key: "${{ steps.php-extension-cache.outputs.key }}"
          restore-keys: "${{ steps.php-extension-cache.outputs.key }}"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-versions }}"
          extensions: "${{ env.php-extensions }}"

      - name: "Setup problem matchers for PHP"
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'

      - name: "Get Composer cache directory"
        id: "php-composer-cache"
        run: 'echo "::set-output name=dir::$(composer config cache-files-dir)"'

      - name: "Cache PHP dependencies"
        uses: "actions/cache@v2"
        with:
          path: "${{ steps.php-composer-cache.outputs.dir }}"
          key: "${{ runner.os }}-composer-${{ hashFiles('**/composer.json', '**/composer.lock') }}"
          restore-keys: "${{ runner.os }}-composer-"

      - name: "Install PHP dependencies"
        run: "composer install --no-interaction --no-progress --no-dev --classmap-authoritative"

      - name: "Get NodeJS cache directory"
        id: "node-npm-cache"
        run: 'echo "::set-output name=dir::$(npm config get cache)"'

      - name: "Cache NodeJS dependencies"
        uses: "actions/cache@v2"
        with:
          path: "${{ steps.node-npm-cache.outputs.dir }}"
          key: "${{ runner.os }}-node-${{ hashFiles('**/package.json', '**/package-lock.json') }}"
          restore-keys: "${{ runner.os }}-node-"

      - name: "Install NodeJS"
        uses: "actions/setup-node@v1.4.4"
        with:
          node-version: "${{ matrix.node-versions }}"

      - name: "Install NodeJS dependencies"
        run: "npm ci"

      - name: "Build assets"
        run: "npm run build"

      - name: "Remote server commands - before upload"
        uses: "appleboy/ssh-action@v0.1.3"
        with:
          host: "${{ secrets.DEPLOY_HOST }}"
          port: "${{ secrets.DEPLOY_PORT }}"
          username: "${{ secrets.DEPLOY_USER }}"
          key: "${{ secrets.DEPLOY_KEY }}"
          script: |
            cd /www/skeleton-website
            cp www/.maintenance.php www/.maintenance.active.php

      - name: "Upload files"
        env:
          DEPLOY_DEST: "/www/skeleton-website"
        run: |
          echo "${{secrets.DEPLOY_KEY}}" > deploy_key
          chmod 600 ./deploy_key
          rsync -chavzr --delete \
            -e 'ssh -p ${{ secrets.DEPLOY_PORT }} -i ./deploy_key -o StrictHostKeyChecking=no' \
            --exclude=/deploy_key \
            --exclude=/.git/ \
            --exclude=/.github/ \
            --exclude=/node_modules/ \
            --exclude=/www/upload/ \
            --exclude=/app/config/server/local.neon \
            --exclude=/log/* \
            --exclude=/temp/* \
            --exclude=.env \
            ./ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ env.DEPLOY_DEST }}

      - name: "Remote server commands - after upload"
        uses: "appleboy/ssh-action@v0.1.3"
        with:
          host: "${{ secrets.DEPLOY_HOST }}"
          port: "${{ secrets.DEPLOY_PORT }}"
          username: "${{ secrets.DEPLOY_USER }}"
          key: "${{ secrets.DEPLOY_KEY }}"
          script: |
            cd /www/skeleton-website
            mv app/config/server/stable.neon app/config/server/local.neon
            rm -rf temp/cache
            php bin/console migrations:continue
            rm -f www/.maintenance.active.php
